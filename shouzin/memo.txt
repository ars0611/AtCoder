今はただの殴り書きではあるが、もっと知識が増えたら体系的にまとめたい

---実装時に気を付ける基礎的なこと---
.join()はstr型にしか使えない
for文回すときはiのrangeケア
整数平方数が欲しければsqrtではなくisqrtを用いましょう(int(math.sqrt)は誤差がでる)
除算でオーバーフローの可能性があるなら、式変形をして整数で扱えるようにする
自明だが、桁数がとても大きい数の演算は計算に時間がかかるため油断するとTLE踏む
計算量の見積もりは雰囲気ではなく丁寧にやる

---データ型関連---
配列.pop(0)よりdeque.popleft()のほうが早い

heapq.heapify(list) :=listを優先度付きキューに変換
heapq.heappush(list, value) := listにvalueをpush
heapq.heappop(list) := heapからminをpop
逆に,maxをpopしたかったら符号反転して格納すればよい

sorted(list,key = lambda x:x[n])とすると二次元配列listを第n列に着目してsortできる
list_copy = copy.deepcopy(list)とすると深いコピーが作れる

set()：順序付き集合で重複を許さないし、参照時はO(1)

from sortedcontainers import SortedSet, SortedList, SortedDict
勝手にsortしてくれる上ににぶたんも備わっている最強データ構造
環境構築はbashで pip install sortedcontainersを実行するだけ

defaultdict(int) は、存在しないキーにアクセスされたら0を自動でセットする辞書
変数名[key] = valueで追記
for value in dict_a.values(): 辞書型のvalueについてすべて参照できる。.keys()とするとkeyについても同様
list = sorted(dict.keys())とするとkeyを昇順にしたlistを得る。.values()とするとvalueについても同様

---アルゴリズム関連---
二分探索：bisect.bisect_left(list,挿入したい値) = 挿入すべきidx
単調増加な関数->答えで二分探索 i.e. 答えがある値以上か以下かTF返すcheck関数
しゃくとり法：条件を満たすような区間のカウントに使える
半分全列挙：計算量減らすテクいやつ
二つのリストを比べるとき、片方sortしてそれに対して二分探索するといいかも 

座標圧縮：dict{key:value}
key := 圧縮前, value := 圧縮後とする

動的計画法：いくつか前の演算結果を利用する
DPの復元：ゴールから逆向きにスタートし、どの道のりできたかを調べる
部分和：二次元のdpを行う。イメージは表計算
ナップサック：表計算。制約を見てiとjを何にするか決める。
LCS：最長部分文字列。二次元DPを行う。それぞれのi,j文字目までを用いて作れる最長の部分文字列をdp[i][j]に格納する。
編集距離：LCSのような表を考えるが、一方の1~i+1文字目の文字列からもう一方の1~j+1文字目の文字列を作る際の編集距離をdp[i][j]に格納する。
区間DP：dp[左端][右端]でDP。上と違いマス目の表をイメージすると混乱するので注意。
遷移形式：一手先を考えてDP。
ダブリング：1,2,4,8,..手先を前計算しておくことでn手先を答える
動的計画法、なんかセグ木で高速化できるらしい

from itertools import combinations
combinations(list(range(1,n+1)), m)は[1, ..., n+1]から重複なしでn個選ぶ組み合わせを全列挙する
自明ではあるが、得られる組み合わせは狭義単調増加
list(itertools.permutations(list))で順列を全列挙したlistが得られる

繰り返し二乗法：指数を進変換し、ビットが立っている箇所に関して累乗をかけあわせる
->a**bを愚直に求めるとO(b)だが,O(logb)に減らせる

セグ木：各セルに区間に関する情報を持つ。深くなるたびに扱う区間の長さが半分にされる

---数学的知識---
ある数nが素数であることは,math.isqrt(n)以下の素数でnが割り切れないことと同値
->これを用いた判定よりさらに計算量を減らしたのがエラトステネスのふるい（B26参照）

lcm * gcd == a * bが成り立つ

a/bを素数mで割ったときの余りはa * (b**m-2)をmで割ったときの余りと等しいらしい(証明略)

ゲームの勝ち方：勝ち負けの状態についてDP
ニムの勝ち方：すべてのXORが0なら負け（証明略）

---考察面---
Cあるある：q個のqueryを受け取る。文章通り実装すると二重ループになってしまうので、操作などに着目して特徴的なものを変数こねくりまわしてどうにかすると良い。
query系の問題はデータの持ち方を工夫するとTLEが取れるかも
偶奇に着目するとよいことがあるかも
因数分解のような考え方を用いることで愚直にやった際の計算量からある程度改善されることがある
前から愚直に考えてうまくいかないときは,視点を変えて後ろから考えてみるとうまくいくかも
全探索をする際,何に対して全探索するか変えるとうまくいくかも
問題設定通りに素直に実装するのが難しい場合,言い換えを考えるとうまくいくかも
操作手順が自由かつどの手順でも同じ結果に帰着するなら,不変量に着目

---グラフアルゴリズム---
bfs：最短経路絡み

dfs：grid絡みであれば,dxとdyの配列用意して,nodeを定義せずにdx,dyを関数で使って探索していくとうまい
移動回数数えながらdfs：関数内でvisitedをリセットしたり出力用のansに++すると良いかも
有向グラフでも,無向グラフと見て順向きでない辺のほうの情報を持っておくとき,符号反転とかうまいことするといいかも

---その他---
bit演算 &(and),|(or),^(xor)はいちいち自分で二進変換せずともやってくれる
if y >> j & 1 == 1: #yを二進表記した際のjビット目が1かどうか判定し,1なら処理を実行